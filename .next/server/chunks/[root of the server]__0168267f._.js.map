{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/dbConnect.js"],"sourcesContent":["\nconst dbConfig = {\n    host: 'metro.proxy.rlwy.net',\n    user: 'root',  \n    password: 'JHoLNUUONqCLPdIipwcqKaYAXogjRGGu', \n    database: 'railway', \n    port: 39376 \n};\n\nexport default dbConfig\n\n\n"],"names":[],"mappings":";;;AACA,MAAM,WAAW;IACb,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU;IACV,MAAM;AACV;uCAEe","debugId":null}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/log_in/route.js"],"sourcesContent":["import jwt from \"jsonwebtoken\";\nimport dbConfig from \"../dbConnect\";\nimport mysql from \"mysql2/promise\";\nimport bcrypt from \"bcryptjs\";\nimport { NextResponse } from \"next/server\";\n\nexport async function POST(req) {\n    const { username, password } = await req.json();\n\n    try {\n        const connection = await mysql.createConnection(dbConfig);\n        const [rows] = await connection.execute(\n            \"SELECT id, username, passwd FROM user_tbl WHERE username = ? LIMIT 1\",\n            [username]\n        );\n\n        if (rows.length === 0) {\n            return new NextResponse(\"User Not Found\", { status: 404 });\n        }\n\n        const isValid = await bcrypt.compare(password, rows[0].passwd);\n        if (isValid) {\n            const token = jwt.sign(\n                { id: rows[0].id, username: rows[0].username },\n                process.env.JWT_SECRET_KEY,\n                { expiresIn: \"1h\" }\n            );\n\n            // Create response object\n            const response = new NextResponse(\"Log In Successfully\", { status: 200 });\n\n            // Set cookie properly\n            response.cookies.set({\n                name: \"token\",\n                value: token,\n                path: \"/\",\n                httpOnly: true,  // Protect from JavaScript access\n                maxAge: 3600,    // 1 hour expiration\n                secure: process.env.NODE_ENV === \"production\", // Secure in production\n                sameSite: \"Strict\",\n            });\n\n            return response;\n        } else {\n            return new NextResponse(\"Invalid Password\", { status: 400 });\n        }\n    } catch (error) {\n        console.error(error);\n        return new NextResponse(\"Error with database connection\", { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,GAAG;IAC1B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAE7C,IAAI;QACA,MAAM,aAAa,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC,yHAAA,CAAA,UAAQ;QACxD,MAAM,CAAC,KAAK,GAAG,MAAM,WAAW,OAAO,CACnC,wEACA;YAAC;SAAS;QAGd,IAAI,KAAK,MAAM,KAAK,GAAG;YACnB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,kBAAkB;gBAAE,QAAQ;YAAI;QAC5D;QAEA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,EAAE,CAAC,MAAM;QAC7D,IAAI,SAAS;YACT,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAClB;gBAAE,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE;gBAAE,UAAU,IAAI,CAAC,EAAE,CAAC,QAAQ;YAAC,GAC7C,QAAQ,GAAG,CAAC,cAAc,EAC1B;gBAAE,WAAW;YAAK;YAGtB,yBAAyB;YACzB,MAAM,WAAW,IAAI,gIAAA,CAAA,eAAY,CAAC,uBAAuB;gBAAE,QAAQ;YAAI;YAEvE,sBAAsB;YACtB,SAAS,OAAO,CAAC,GAAG,CAAC;gBACjB,MAAM;gBACN,OAAO;gBACP,MAAM;gBACN,UAAU;gBACV,QAAQ;gBACR,QAAQ,oDAAyB;gBACjC,UAAU;YACd;YAEA,OAAO;QACX,OAAO;YACH,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,oBAAoB;gBAAE,QAAQ;YAAI;QAC9D;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,kCAAkC;YAAE,QAAQ;QAAI;IAC5E;AACJ","debugId":null}}]
}