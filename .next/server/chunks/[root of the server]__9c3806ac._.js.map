{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/dbConnect.js"],"sourcesContent":["\nconst dbConfig = {\n    host: 'metro.proxy.rlwy.net',\n    user: 'root',  \n    password: 'JHoLNUUONqCLPdIipwcqKaYAXogjRGGu', \n    database: 'railway', \n    port: 39376 \n};\n\nexport default dbConfig\n\n\n"],"names":[],"mappings":";;;AACA,MAAM,WAAW;IACb,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU;IACV,MAAM;AACV;uCAEe","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/sign_up/route.js"],"sourcesContent":["import mysql from \"mysql2/promise\"\nimport bcrypt, { hash } from \"bcrypt\"\nimport  dbConfig  from \"../dbConnect.js\"\nimport { connection } from \"next/server.js\"\n\nexport async function POST(req) {\n    try {\n\n        const { email, username, e_passwd, c_passwd } = await req.json()\n\n        const cleanEmail = email.trim().toLowerCase()\n        const cleanUsername = username.trim().toLowerCase()\n        const cleanE_passwd = e_passwd.trim().toLowerCase()\n        const cleanC_passwd = c_passwd.trim().toLowerCase()\n        \n        if (cleanE_passwd !== cleanC_passwd) {\n            return new Response(JSON.stringify({ error: \"Password Not Match\" }, { status: 400 }))\n        }\n\n        const hashPassword = await bcrypt.hash(c_passwd, 10)\n\n        const connection = await mysql.createConnection(dbConfig)\n\n        const [existingUser] = await connection.execute(\n            'SELECT * FROM user_tbl WHERE email = ? OR username = ?',\n            [cleanEmail, cleanUsername]\n        )\n\n        if (existingUser.length > 0) {\n            await connection.end()\n            return new Response(JSON.stringify({ error: \"Email or Username already exist\" }))\n        }\n\n        const [result] = await connection.execute(\n            'INSERT INTO user_tbl (username, passwd, email) VALUES (?, ?, ?)',\n            [cleanUsername, hashPassword,cleanEmail]\n        )\n\n         return new Response(JSON.stringify({ message: 'User registered successfully!', data: result }), {\n            status: 200,\n            headers: { 'Content-Type': 'application/json' }\n        });\n\n        if (connection) {\n            await connection.end()\n        }\n\n    } catch (error) {\n        console.error(\"Error during user signup:\", error);\n        return new Response(JSON.stringify({ error: \"Database connection failed.\" }), { status: 500 });\n    }\n    \n\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAG;IAC1B,IAAI;QAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE9D,MAAM,aAAa,MAAM,IAAI,GAAG,WAAW;QAC3C,MAAM,gBAAgB,SAAS,IAAI,GAAG,WAAW;QACjD,MAAM,gBAAgB,SAAS,IAAI,GAAG,WAAW;QACjD,MAAM,gBAAgB,SAAS,IAAI,GAAG,WAAW;QAEjD,IAAI,kBAAkB,eAAe;YACjC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QACtF;QAEA,MAAM,eAAe,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEjD,MAAM,aAAa,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC,yHAAA,CAAA,UAAQ;QAExD,MAAM,CAAC,aAAa,GAAG,MAAM,WAAW,OAAO,CAC3C,0DACA;YAAC;YAAY;SAAc;QAG/B,IAAI,aAAa,MAAM,GAAG,GAAG;YACzB,MAAM,WAAW,GAAG;YACpB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAkC;QAClF;QAEA,MAAM,CAAC,OAAO,GAAG,MAAM,WAAW,OAAO,CACrC,mEACA;YAAC;YAAe;YAAa;SAAW;QAG3C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAiC,MAAM;QAAO,IAAI;YAC7F,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;;IAMJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAA8B,IAAI;YAAE,QAAQ;QAAI;IAChG;AAGJ","debugId":null}}]
}