{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/dbConnect.js"],"sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\n\nconst dbConfig = {\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT\n};\n\nexport default dbConfig;\n"],"names":[],"mappings":";;;AAAA;;AACA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAEb,MAAM,WAAW;IACb,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO;AAC7B;uCAEe","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/sign_up/route.js"],"sourcesContent":["import mysql from \"mysql2/promise\";\nimport bcrypt from \"bcrypt\";\nimport dbConfig from \"../dbConnect.js\";\nimport { NextResponse } from \"next/server\";\n\nexport async function POST(req) {\n    try {\n        const { email, username, e_passwd, c_passwd } = await req.json();\n\n        const cleanEmail = email.trim().toLowerCase();\n        const cleanUsername = username.trim().toLowerCase();\n        const cleanE_passwd = e_passwd.trim().toLowerCase();\n        const cleanC_passwd = c_passwd.trim().toLowerCase();\n\n        if (cleanE_passwd !== cleanC_passwd) {\n            return NextResponse.json({ error: \"Passwords do not match\" }, { status: 400 });\n        }\n\n        const hashPassword = await bcrypt.hash(c_passwd, 10);\n\n        const connection = await mysql.createConnection(dbConfig);\n\n        const [existingUser] = await connection.execute(\n            \"SELECT * FROM user_tbl WHERE email = ? OR username = ?\",\n            [cleanEmail, cleanUsername]\n        );\n\n        if (existingUser.length > 0) {\n            await connection.end();\n            return NextResponse.json({ error: \"Email or Username already exists\" }, { status: 400 });\n        }\n\n        const [result] = await connection.execute(\n            \"INSERT INTO user_tbl (username, passwd, email) VALUES (?, ?, ?)\",\n            [cleanUsername, hashPassword, cleanEmail]\n        );\n\n        await connection.end();\n\n        return NextResponse.json(\n            { message: \"User registered successfully!\", data: result },\n            { status: 200 }\n        );\n\n    } catch (error) {\n        console.error(\"Error during user signup:\", error);\n        return NextResponse.json({ error: \"Database connection failed.\" }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAG;IAC1B,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE9D,MAAM,aAAa,MAAM,IAAI,GAAG,WAAW;QAC3C,MAAM,gBAAgB,SAAS,IAAI,GAAG,WAAW;QACjD,MAAM,gBAAgB,SAAS,IAAI,GAAG,WAAW;QACjD,MAAM,gBAAgB,SAAS,IAAI,GAAG,WAAW;QAEjD,IAAI,kBAAkB,eAAe;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,MAAM,eAAe,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEjD,MAAM,aAAa,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC,yHAAA,CAAA,UAAQ;QAExD,MAAM,CAAC,aAAa,GAAG,MAAM,WAAW,OAAO,CAC3C,0DACA;YAAC;YAAY;SAAc;QAG/B,IAAI,aAAa,MAAM,GAAG,GAAG;YACzB,MAAM,WAAW,GAAG;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmC,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QAEA,MAAM,CAAC,OAAO,GAAG,MAAM,WAAW,OAAO,CACrC,mEACA;YAAC;YAAe;YAAc;SAAW;QAG7C,MAAM,WAAW,GAAG;QAEpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAiC,MAAM;QAAO,GACzD;YAAE,QAAQ;QAAI;IAGtB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACrF;AACJ","debugId":null}}]
}