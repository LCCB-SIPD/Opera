{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/dbConnect.js"],"sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\n\nconst dbConfig = {\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT\n};\n\nexport default dbConfig;\n"],"names":[],"mappings":";;;AAAA;;AACA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAEb,MAAM,WAAW;IACb,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO;AAC7B;uCAEe","debugId":null}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/getUser/route.js"],"sourcesContent":["import dbConfig from \"../dbConnect\";\nimport mysql from \"mysql2/promise\"\nimport { NextResponse } from \"next/server\";\n\nexport async function POST(req) {\n\n    try {\n\n        const body = await req.json();\n        const username = body?.username;\n\n        if (!username) {\n            return NextResponse.json({ error: \"Username is required\" }, { status: 400 });\n        }\n\n        const connection = await mysql.createConnection(dbConfig)\n\n        const [rows] = await connection.execute(\n            \"SELECT * FROM user_tbl WHERE username = ? LIMIT 1\",\n            [username]\n        )\n        \n        //await connection.end()\n\n        if (rows[0].name) {\n\n            return NextResponse.json(\n                { message: 'Fetch Data Successfully', data: rows[0] },\n                { status: 200 }\n            )\n\n        } else {\n\n            return NextResponse.json(\n                { error: 'Update User Info'},\n                { status: 400 }\n            )\n\n        }\n\n        \n\n    } catch(error) {\n\n        console.error(\"Error during user signup:\", error);\n        return NextResponse.json({ error: \"Database connection failed.\" }, { status: 500 });\n    }\n\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAG;IAE1B,IAAI;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,WAAW,MAAM;QAEvB,IAAI,CAAC,UAAU;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,MAAM,aAAa,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC,yHAAA,CAAA,UAAQ;QAExD,MAAM,CAAC,KAAK,GAAG,MAAM,WAAW,OAAO,CACnC,qDACA;YAAC;SAAS;QAGd,wBAAwB;QAExB,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;YAEd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAA2B,MAAM,IAAI,CAAC,EAAE;YAAC,GACpD;gBAAE,QAAQ;YAAI;QAGtB,OAAO;YAEH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAkB,GAC3B;gBAAE,QAAQ;YAAI;QAGtB;IAIJ,EAAE,OAAM,OAAO;QAEX,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACrF;AAEJ","debugId":null}}]
}