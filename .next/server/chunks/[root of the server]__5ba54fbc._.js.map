{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/dbConnect.js"],"sourcesContent":["\nconst dbConfig = {\n    host: 'metro.proxy.rlwy.net',\n    user: 'root',  \n    password: 'JHoLNUUONqCLPdIipwcqKaYAXogjRGGu', \n    database: 'railway', \n    port: 39376 \n};\n\nexport default dbConfig\n\n\n"],"names":[],"mappings":";;;AACA,MAAM,WAAW;IACb,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU;IACV,MAAM;AACV;uCAEe","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///home/cordy/One_For_All_PHP/one_for_all/app/api/test_db/route.js"],"sourcesContent":["\nimport mysql from \"mysql2/promise\";\n\nimport dbConfig from \"../dbConnect\";\n\nexport async function GET() {\n    let connection;\n    try {\n        connection = await mysql.createConnection(dbConfig);\n        await connection.ping(); // ✅ Check if database is connected\n\n        return Response.json({ message: \"✅ Database connected successfully!\" });\n\n    } catch (error) {\n        console.error(\"❌ Database Error:\", error.message);\n        return Response.json({ error: \"Database connection failed.\" }, { status: 500 });\n\n    } finally {\n        if (connection) {\n            await connection.end(); // Close connection\n        }\n    }\n}\n"],"names":[],"mappings":";;;AACA;AAEA;;;AAEO,eAAe;IAClB,IAAI;IACJ,IAAI;QACA,aAAa,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC,yHAAA,CAAA,UAAQ;QAClD,MAAM,WAAW,IAAI,IAAI,mCAAmC;QAE5D,OAAO,SAAS,IAAI,CAAC;YAAE,SAAS;QAAqC;IAEzE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qBAAqB,MAAM,OAAO;QAChD,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IAEjF,SAAU;QACN,IAAI,YAAY;YACZ,MAAM,WAAW,GAAG,IAAI,mBAAmB;QAC/C;IACJ;AACJ","debugId":null}}]
}